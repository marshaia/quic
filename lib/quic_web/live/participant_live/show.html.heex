<div class="flex justify-start">
  <.my_back navigate={"/sessions/#{@participant.session.id}"}>Back to Session</.my_back>
</div>


<%!-- PROFILE --%>
<section class="flex justify-center w-full my-6">
  <div class="flex flex-col items-center w-[90%] md:w-[70%] p-4 pb-6 bg-[var(--background-card)] rounded-xl border border-[var(--border)]">
    <div class="flex flex-col items-center justify-between gap-4">
        <h5><%= @participant.name %></h5>
        <div class="flex items-center gap-1">
          <Heroicons.trophy class="w-5 h-5 text-[var(--primary-color)]"/>
          <p><%= @participant.total_points %> of <%= @quiz.total_points %></p>
        </div>
    </div>

    <%!-- PARTICIPANT PROGRESS --%>
    <.participant_progress_bar class="mt-6" progress={QuicWebAux.progress_percentage(@participant.current_question, Enum.count(@quiz.questions))} current_question={@participant.current_question} num_quiz_questions={Enum.count(@quiz.questions)} /> 
  </div>
</section>


<%!-- ANSWERS & RESULTS --%>
<h6 class="mt-8 mb-3 font-bold">Answers</h6>
<section :for={question <- @quiz.questions} id={"participant-page-answer-#{question.id}"} phx-hook="PrismInitializer" class="bg-[var(--background-card)] border border-[var(--border)] rounded-md p-3 mb-5">
  <% participant_answer = Enum.find(@participant.answers, nil,fn a -> a.question_id === question.id end) %>
  <% has_answered = participant_answer !== nil %>

  <%!-- QUESTION DESCRIPTION --%>
  <div class="flex gap-5 mb-5">
    <div class="rounded-full border border-[var(--primary-color)] w-8 h-8 flex items-center justify-center">
      <h6><%= question.position %></h6>
    </div>
    
    <div class="w-full overflow-auto">
      <div class="flex justify-between">
        <%!-- QUESTION TYPE --%>
        <div class={["rounded-md px-2 max-w-fit mb-3", QuicWebAux.get_type_color(question.type)]}>
          <span class="text-xs text-white"> <%= QuicWebAux.readable_name(question.type) %> </span>
        </div>

        <%!-- POINTS OBTAINED --%>
        <%= if question.type === :open_answer do %>
          <%= if not has_answered || participant_answer.points_obtained !== nil do %>
            <div class="flex gap-1">
              <Heroicons.trophy class="w-5 h-5 text-[var(--primary-color-text)] stroke-1" />
              <p><%= (if has_answered && participant_answer.points_obtained !== nil, do: participant_answer.points_obtained, else: 0) %></p>
            </div>
          <% else %>
            <div>
              <button phx-click={"evaluate_open_answer"} phx-value-position={question.position} class="px-3 py-0.5 gradient rounded-full">
                <p class="text-white">Assess</p>
              </button>
            </div>
          <% end %>
          
        <% else %>
          <div class="flex gap-1">
            <Heroicons.trophy class="w-5 h-5 text-[var(--primary-color-text)] stroke-1" />
            <p><%= (if has_answered && participant_answer.result === :correct, do: question.points, else: 0) %></p>
          </div>
        <% end %>
      </div>
      
      <.markdown text={question.description} />

      <%= if question.type === :fill_the_code do %>
        <% parameters = Enum.find(@quiz.parameters, fn p -> p.question_id === question.id end) %>
        <.language_previewer text={parameters.code} language={Atom.to_string(parameters.language)} class="mt-5" />
      <% end %>
    </div>
  </div>

  <%!-- DIVIDER --%>
  <hr class="border border-[var(--border)] mb-2 w-full" />

  <%!-- ANSWERS --%>
  <%= if has_answered do %> 
    <% question_answers = Enum.filter(@quiz.answers, fn a -> a.question_id === question.id end) %>
    
    <div class="grid w-full grid-cols-1 gap-2 px-3 lg:grid-cols-2 lg:px-8" style="grid-auto-rows: 1fr">
      <%= if question.type === :true_false do %>
        <% answer = Enum.at(question_answers, 0, nil) %>
        <% participant_answer = Enum.at(participant_answer.answer,0,"") %>
        <% correct_answer? = (participant_answer === "true" && answer.is_correct) || (participant_answer === "false" && answer.is_correct === false) %>
        <div class="flex items-center justify-start h-full gap-3 px-5">
          <.right_or_wrong is_correct={correct_answer?} class="w-6 h-6 min-h-6 min-w-6" />
          <p><%= if participant_answer === "true", do: "True", else: "False" %></p>
        </div>
      <% end %>

      <%= if question.type === :single_choice do %>
        <div :for={{q_answer, index} <- Enum.with_index(question_answers)} 
          class={["h-full p-1 pb-2 px-5 overflow-auto",
            (if index + 1 !== Enum.count(question_answers), do: "border-b border-[var(--border)] lg:border-0"), 
            (if index === 0 || index === 1, do: "lg:border-b lg:border-[var(--border)]")
        ]}>
          <div class="flex items-center justify-start w-full h-full gap-2 lg:gap-3">
            <%= if Enum.member?(participant_answer.answer, q_answer.id) do %>
              <.right_or_wrong is_correct={q_answer.is_correct} class="w-6 h-6 min-h-6 min-w-6" />
            <% else %>
              <.blank_square class="w-6 h-6 min-h-6 min-w-6" />
            <% end %>
            <div class="flex-1">
              <.markdown class="w-full" text={q_answer.answer} />
            </div>
          </div>
        </div>
      <% end %>

      <%= if question.type === :multiple_choice do %>
        <div :for={{q_answer, index} <- Enum.with_index(question_answers)}
          class={["h-full p-1 px-5 overflow-auto", 
            (if index + 1 !== Enum.count(question_answers), do: "border-b border-[var(--border)] lg:border-0"), 
            (if index === 0 || index === 1, do: "lg:border-b lg:border-[var(--border)]")
        ]}>
          <div class="flex items-center justify-start w-full h-full gap-2 lg:gap-3">
            <%= if Enum.member?(participant_answer.answer, q_answer.id) do %>
              <.right_or_wrong is_correct={q_answer.is_correct} class="w-6 h-6 min-h-6 min-w-6" />
            <% else %>
              <.blank_square class="w-6 h-6 min-h-6 min-w-6" />
            <% end %>
            <div class="flex-1">
              <.markdown class="w-full" text={q_answer.answer} />
            </div>
          </div>
        </div>
      <% end %>


      <%= if question.type === :fill_the_blanks do %>
        <% question_answer = Enum.at(question_answers, 0, nil) %>
        <% participant_text = Enum.at(participant_answer.answer,0,"") %>

        <%!-- PARTICIPANT ANSWER --%>
        <div class={["w-full p-1 px-5 overflow-auto", (if participant_answer.result === :correct, do: "lg:col-span-2", else: "border-b border-[var(--border)] md:border-0")]}>
          <div class="flex items-center justify-start w-full gap-2">
            <.right_or_wrong is_correct={participant_answer.result === :correct} class="w-6 h-6 min-h-6 min-w-6" />
            <.markdown class="w-full" text={participant_text} />
          </div>
        </div>

        <%!-- QUESTION ANSWER --%>
        <div :if={participant_answer.result === :incorrect} class="h-full p-1 px-5 overflow-auto">
          <div class="flex items-center w-full gap-1">
            <%!-- <p class="text-xs font-medium">Correct Answer: </p> --%>
            <Heroicons.check class="w-4 min-w-4 h-4 min-h-4 text-[var(--primary-color-text)]" />
            <p><.markdown class="w-full" text={question_answer.answer} /></p>
          </div>
        </div>
      <% end %>

      <%= if question.type === :fill_the_code do %>
        <% participant_text = Enum.at(participant_answer.answer,0,"") %>
        <% {:ok, answers} = Jason.decode(participant_text) %>
        <% parameters = Enum.find(@quiz.parameters, fn p -> p.question_id === question.id end) %>

        <%!-- PARTICIPANT ANSWER --%>
        <div class={["w-full p-1 px-5 overflow-auto", (if participant_answer.result === :correct, do: "lg:col-span-2")]}>
          <div class="flex items-center justify-start w-full gap-2">
            <.right_or_wrong is_correct={participant_answer.result === :correct} class="w-6 h-6 min-h-6 min-w-6" />
            <div class="flex-1">
              <.language_previewer text={Parameters.put_correct_answers_participant_in_code(parameters.code, answers)} language={Atom.to_string(parameters.language)} />
            </div>
          </div>

          <div :if={participant_answer.result === :error || participant_answer.result === :incorrect} class="mb-3 -mt-3">
            <.error> <%= participant_answer.error_reason %> </.error>
          </div>
          <hr :if={participant_answer.result === :error || participant_answer.result === :incorrect} class="w-full lg:hidden" />

        </div>

        <%!-- QUESTION ANSWER --%>
        <div class={["h-full p-1 px-5 overflow-auto", (if participant_answer.result === :correct, do: "hidden")]}>
          <div class="flex items-center justify-start w-full gap-2">
            <Heroicons.check class="w-4 min-w-4 h-4 min-h-4 text-[var(--primary-color-text)]" />
            <div class="flex-1">
              <.language_previewer text={Parameters.put_correct_answers_in_code(parameters)} language={Atom.to_string(parameters.language)} />
            </div>
          </div>
        </div>
      <% end %>

      <%= if question.type === :open_answer do %>
        <% participant_answer = Enum.at(participant_answer.answer,0,"") %>
        <div class="w-full col-span-2 p-1 px-5 overflow-auto">
          <p class="text-[var(--primary-color)] font-medium">Response:</p>
          <.markdown class="w-full" text={participant_answer} />
        </div>
      <% end %>

      <%= if question.type === :code do %>
        <% participant_text = Enum.at(participant_answer.answer,0,"") %>
        <% parameters = Enum.find(@quiz.parameters, fn p -> p.question_id === question.id end) %>

        <div class="w-full col-span-2 p-1 px-5 overflow-auto">
          <div class="flex items-center justify-start w-full gap-2">
            <.right_or_wrong is_correct={participant_answer.result === :correct} class="w-6 h-6 min-h-6 min-w-6" />
            <div class="flex-1">
              <.language_previewer text={participant_text} language={Atom.to_string(parameters.language)} />
            </div>
          </div>

          <div :if={participant_answer.result === :error || participant_answer.result === :incorrect} class="mb-3 -mt-3">
            <.error> <%= participant_answer.error_reason %> </.error>
          </div>
        </div>
      <% end %>
    </div>
    
  <% else %>
    <p>Participant <%= (if @participant.session.status !== :closed, do: "hasn't submmited", else: "did not submit") %> an answer to this question.</p>
  <% end %>
</section> 



<%!-- <.modal :if={@live_action === :evaluate_open_answer} id="evaluate-open-answer-participant-modal" show on_cancel={JS.patch(~p"/session/#{@participant.session.id}/participants/#{@participant.id}")}>
  <.live_component
    module={QuicWeb.QuizLive.EvaluateOpenAnswerForm}
    id="open-answer-participant-modal-form"
    action={@live_action}
    current_author={@current_author}
    participant={@participant}
    selected_question={@selected_question}
    patch={~p"/session/#{@participant.session.id}/participants/#{@participant.id}"}
  />
</.modal> --%>
